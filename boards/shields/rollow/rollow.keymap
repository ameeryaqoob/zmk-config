//sudo west build -p -d build/left -b nice_nano_v2 -- -DSHIELD=rollow_left -DZMK_EXTRA_MODULES=/Users/ameer/keyboard/zmk-config
//sudo west build -p -d build/right -b nice_nano_v2 -- -DSHIELD=rollow_right -DZMK_EXTRA_MODULES=/Users/ameer/keyboard/zmk-config

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>

&caps_word {
    continue-list = <UNDERSCORE MINUS BSPC>;
};

/ {
combos {
        compatible = "zmk,combos";
        combo_escape {
            timeout-ms = <50>;
            key-positions = <31 34>;
            bindings = <&kp ESC>;
            };
};
behaviors {    
        msc: mouse_scroll {
            compatible = "zmk,behavior-input-two-axis";
            #binding-cells = <1>;
            x-input-code = <INPUT_REL_HWHEEL>;
            y-input-code = <INPUT_REL_WHEEL>;
            time-to-max-speed-ms = <300>;
            acceleration-exponent = <0>;
        };
        mmv: mouse_move {
            compatible = "zmk,behavior-input-two-axis";
            #binding-cells = <1>;
            x-input-code = <INPUT_REL_X>;
            y-input-code = <INPUT_REL_Y>;
            time-to-max-speed-ms = <300>;
            acceleration-exponent = <1>;
        };
        hr: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            require-prior-idle-ms = <200>;
            bindings = <&kp>, <&kp>;
        };  
        kpkphp: kpkphp {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping_term_ms = <200>;
            quick_tap_ms = <200>;
            flavor = "hold-preferred";
            bindings = <&kp>, <&kp>;
        }; 
         mousemkphp: mousemokphp {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            bindings = <&mouse>, <&mkp>;
        };  
         mokphp: mokphp {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred"; 
            tapping-term-ms = <200>;
            bindings = <&mo>, <&kp>;
        };  
         mokptp: mokptp {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&kp>;
        };  
         mokpb: mokpb {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&kp>;
        };  
         monavguitog: monavguitog {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <150>;
            bindings = <&monavgui>, <&tog>;
        };  
         moto: moto {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <150>;
            bindings = <&mo>, <&to>;
        };  
        skq: sticky_key_quick_release {
            compatible = "zmk,behavior-sticky-key";
            #binding-cells = <1>;
            bindings = <&kp>;
            release-after-ms = <1000>;
            quick-release;
            ignore-modifiers;
        };
         moskq: moment_sticky_quick_release {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <150>;
            bindings = <&mo>, <&skq>;
        };  
        shiftbspcdel: shift_backspace_delete {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kpkphp RSHIFT BSPC>, <&kpkphp RSHIFT DEL>;
            mods = <(MOD_LSFT)>;
        };
        mod_scrl_dl: scroll_down_left {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&msc MOVE_Y(16)>, <&msc MOVE_X(16)>;
            mods = <(MOD_LSFT)>;
        };
        mod_scrl_ru: scroll_right_up {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&msc MOVE_Y(-16)>, <&msc MOVE_X(-16)>;
            mods = <(MOD_LSFT)>;
        };
        mod_mousel: mouse_left_boost {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&mmv MOVE_X(-1500)>, <&mmv MOVE_X(-3000)>;
            mods = <(MOD_LSFT)>;
        };
        mod_mouser: mouse_right_boost {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&mmv MOVE_X(1500)>, <&mmv MOVE_X(3000)>;
            mods = <(MOD_LSFT)>;
        };
        mod_mouseu: mouse_up_boost {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&mmv MOVE_Y(-1500)>, <&mmv MOVE_Y(-3000)>;
            mods = <(MOD_LSFT)>;
        };
        mod_moused: mouse_down_boost {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&mmv MOVE_Y(1500)>, <&mmv MOVE_Y(3000)>;
            mods = <(MOD_LSFT)>;
        };
//----------------------ARROW MODS-------------------------
        left_backspace: left_backspace {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LEFT>, <&kp BSPC>;
            mods = <(MOD_LCTL)>;
        };
        right_delete: right_delete {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp RIGHT>, <&kp DEL>;
            mods = <(MOD_LCTL)>;
        };
        left_alt_backspace: left_alt_backspace {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&left_backspace>, <&kp LA(BSPC)>;
            mods = <(MOD_RCTL)>;
        };
        right_alt_delete: right_alt_delete {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&right_delete>, <&kp LA(DEL)>;
            mods = <(MOD_RCTL)>;
        };
        arrow_mods: arrow_mods {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&right_alt_delete>, <&left_alt_backspace>;
        };
//--------------------MOUSE SCROLL ROTARY ENCODER FIX--------------------
        slow_y: slow_y {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&downslow>, <&upslow>;
        };
        slow_x: slow_x {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&rightslow>, <&leftslow>;
        };
        med_y: med_y {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&downmed>, <&upmed>;
        };
        med_x: med_x {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&rightmed>, <&leftmed>;
        };
        fast_y: fast_y {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&downfast>, <&upfast>;
        };
        fast_x: fast_x {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&rightfast>, <&leftfast>;
        };
        
macros {
        upslow: upslow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap_time 3>
                , <&msc MOVE_Y(-40)>;
         };
        downslow: downslow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap_time 3>
                , <&msc MOVE_Y(40)>;
         };
        leftslow: leftslow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap_time 3>
                , <&msc MOVE_X(40)>;
         };
        rightslow: rightslow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap_time 3>
                , <&msc MOVE_X(-40)>;
         };
        upmed: upmed {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap_time 3>
                , <&msc MOVE_Y(-200)>;
         };
        downmed: downmed {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap_time 3>
                , <&msc MOVE_Y(200)>;
         };
        leftmed: leftmed {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap_time 3>
                , <&msc MOVE_X(200)>;
         };
        rightmed: rightmed {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap_time 3>
                , <&msc MOVE_X(-200)>;
         };
        upfast: upfast {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap_time 3>
                , <&msc MOVE_Y(-1000)>;
         };
        downfast: downfast {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap_time 3>
                , <&msc MOVE_Y(1000)>;
         };
        leftfast: leftfast {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap_time 3>
                , <&msc MOVE_X(1000)>;
         };
        rightfast: rightfast {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap_time 3>
                , <&msc MOVE_X(-1000)>;
         };
//-----------------------------------------------------------
        monavgui: monavgui {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &mo 7 &kp LGUI>
                , <&macro_pause_for_release>
                , <&macro_release &kp LGUI &mo 7>;
         };
        up: up {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_release &kp LGUI>
                , <&macro_press &kp UP>
                , <&macro_pause_for_release>
                , <&macro_release &kp UP>
                , <&macro_press &kp LGUI>
                , <&macro_pause_for_release>
                , <&macro_release &kp LGUI>;
         };
        down: down {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_release &kp LGUI>
                , <&macro_press &kp DOWN>
                , <&macro_pause_for_release>
                , <&macro_release &kp DOWN>
                , <&macro_press &kp LGUI>
                , <&macro_pause_for_release>
                , <&macro_release &kp LGUI>;
         };
        left: left {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_release &kp LGUI>
                , <&macro_press &kp LEFT>
                , <&macro_pause_for_release>
                , <&macro_release &kp LEFT>
                , <&macro_press &kp LGUI>
                , <&macro_pause_for_release>
                , <&macro_release &kp LGUI>;
         };
        right: right {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_release &kp LGUI>
                , <&macro_press &kp RIGHT>
                , <&macro_pause_for_release>
                , <&macro_release &kp RIGHT>
                , <&macro_press &kp LGUI>
                , <&macro_pause_for_release>
                , <&macro_release &kp LGUI>;
         };
        mouse: mouse {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &to 2>
                , <&macro_pause_for_release>
                , <&macro_press &to 6>;
         };
    };
    keymap {
        compatible = "zmk,keymap";
        0 {
            display-name = "QWERTY"; // 8 character max
bindings = <
&kp Q &kp W &kp E &kp R &kp T                                                &kp Y &kp U &kp I &kp O &kp P
&hr LSHIFT A &hr LALT S &hr LGUI D &hr LCTRL F &hr LS(LG(LA(LCTRL))) G       &hr LS(LG(LA(LCTRL))) H &hr RCTRL J &hr RGUI K &hr RALT L &hr LSHIFT APOS
&kp Z &kp X &kp C &kp V &kp B                                                &kp N &kp M &kp COMMA &kp DOT &kp SLASH
&to 6 &mokphp 3 TAB &mokpb 1 SPACE                                     &shiftbspcdel &mokphp 2 RETURN &to 5
              >;
            sensor-bindings = <&arrow_mods &inc_dec_kp DOWN UP>; //clockwise counterclockwise
        };
        1 {
            display-name = "SYMBOLS";
bindings = <
&kp GRAVE &kp AT &kp HASH &kp DOLLAR &none                                                                          &none &kp LBKT &kp RBKT &kp LPAR &kp RPAR
&hr LSHIFT EXCLAMATION &hr LALT AT &hr LGUI HASH &hr LCTRL DOLLAR &hr LS(LG(LA(LCTRL))) PERCENT  &hr LS(LG(LA(LCTRL))) CARET &hr RCTRL MINUS &hr RGUI UNDER &hr RALT COLON &hr LSHIFT SEMI 
&kp PERCENT &kp CARET &kp AMPS &kp STAR &none                                                          &none &kp LBRC &kp RBRC &none &none
&none &none &none                                                                                 &shiftbspcdel &kp TILDE &none
              >;
            sensor-bindings = <&inc_dec_kp DEL BSPC &inc_dec_kp DOWN UP>; //clockwise counterclockwise
        };  
        2 {
            display-name = "NUMERALS";
bindings = <
&none &none &none &none &none                                                            &none &none &none &none &none
&hr LSHIFT N1 &hr LALT N2 &hr LGUI N3 &hr LCTRL N4 &hr LS(LG(LA(LCTRL))) N5           &hr LS(LG(LA(LCTRL))) N6 &hr RCTRL N7 &hr RGUI N8 &hr RALT N9 &hr LSHIFT N0
&none &none &none &none &none                                                                                  &none &none &kp COMMA &kp DOT &kp SLASH
&none &kp TAB &mokpb 1 SPACE                                                                                                       &shiftbspcdel &mokphp 0 RETURN &none
              >;
            sensor-bindings = <&inc_dec_kp DEL BSPC &inc_dec_kp DOWN UP>; //clockwise counterclockwise
        };
        3 {
            display-name = "MOUSE";
bindings = <
&kp LG(N1) &kp LG(N2) &kp LG(N3) &kp LG(N4) &kp LG(N5)                                &none &kp LEFT &kp UP &kp RIGHT &kp DOWN
&hr LSHIFT LG(N6) &hr LALT LG(N7) &hr LGUI LG(N8) &hr LCTRL LG(N9) &kp LS(LG(LA(LCTRL))) &kp PG_UP &mmv MOVE_X(-1500) &mmv MOVE_Y(-1500) &mmv MOVE_X(1500) &mmv MOVE_Y(1500) 
&none &none &none &none &none                                  &kp PG_DN &mkp MB4 &mkp MB3 &mkp MB5 &mkp MB2
            &to 0 &mkp MB2 &kp SPACE                                                 &mkp MB1 &mod_scrl_dl &mod_scrl_ru
              >;
            sensor-bindings = <&med_x &med_y>; //clockwise counterclockwise
        };
        4 {
            display-name = "BLE";
bindings = <
&bt BT_CLR_ALL &kp K_MUTE &kp C_VOL_DN &kp C_VOL_UP &none                              &none &kp C_BRI_DN &kp C_BRI_UP &none &out OUT_BLE
&bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4    &bt BT_DISC 0 &bt BT_DISC 1 &bt BT_DISC 2 &bt BT_DISC 3 &bt BT_DISC 4  
&bt BT_CLR &none &none &none &none                                 &none &none &none &none &out OUT_USB 
            &to 0 &ext_power EP_OFF &bt BT_PRV                                &bt BT_NXT &ext_power EP_ON &none
              >;
            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp C_BRI_UP C_BRI_DN>; //clockwise counterclockwise
        };
        5 {
            display-name = "GAEM"; // 8 character max
bindings = <
&kp Q &kp W &kp E &kp R &kp T               &kp Y &kp U &kp I &kp O &kp P
&kp A &kp S &kp D &kp F &kp G               &kp H &kp J &kp K &kp L &kp SEMI
&kp Z &kp X &kp C &kp V &kp B               &kp N &kp M &kp COMMA &kp DOT &kp SLASH
&to 0 &kp TAB &kp SPACE                 &kp N1 &kp APOS &tog 5
              >;
            sensor-bindings = <&inc_dec_kp RIGHT LEFT &inc_dec_kp DOWN UP>;
        };
        6 {
            display-name = "MINECRFT";
bindings = <
&kp GRAVE &kp Q &kp W &kp E &kp R                              &none &none &none &none &none 
&kp LSHIFT &kp A &kp S &kp D &kp F                         &kp PG_UP &mmv MOVE_X(-1500) &mmv MOVE_Y(-1500) &mmv MOVE_X(1500) &mmv MOVE_Y(1500) 
&kp Z &kp X &kp C &kp V &kp B                               &kp PG_DN &mkp MB4 &mkp MB3 &mkp MB5 &sl 7
            &to 0 &none &kp SPACE                      &mkp MB1 &mousemkphp 0 MB2 &mkp MB2
              >;
            sensor-bindings = <&med_x &med_y>; //clockwise counterclockwise
        };
        7 {
            display-name = "FUNCTION";
bindings = <
&kp F1 &kp F2 &kp F3 &kp F4 &kp F5           &kp F6 &kp F7 &kp F8 &kp F9 &kp F10
&hr LSHIFT F11 &hr LALT F12 &kp LGUI &kp LCTRL &kp LS(LG(LA(LCTRL))) &kp LS(LG(LA(LCTRL))) &kp RCTRL &kp RGUI &kp RALT &kp LSHIFT  
&none &none &none &none &none                &none &none &none &none &none
      &to 0 &none &none                     &none &none &none
              >;
            sensor-bindings = <&arrow_mods &inc_dec_kp C_VOL_UP C_VOL_DN>; //clockwise counterclockwise
            };
        };
    };
};