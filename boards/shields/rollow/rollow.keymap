// west build -p -d build/left -b nice_nano_v2 -- -DSHIELD=rollow_left -DZMK_EXTRA_MODULES=/Users/test/zmk-config
// west build -p -d build/right -b nice_nano_v2 -- -DSHIELD=rollow_right -DZMK_EXTRA_MODULES=/Users/test/zmk-config

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>

&mmv {
    acceleration-exponent = <1>;    
    time-to-max-speed-ms = <300>;     
    delay-ms = <0>;                  
};

&msc {
    acceleration-exponent = <0>;    
    time-to-max-speed-ms = <0>;    
    delay-ms = <0>;                 
};

/ {
combos {
        compatible = "zmk,combos";
        combo_escape {
            timeout-ms = <70>;
            key-positions = <0 9>;
            bindings = <&kp ESC>;
            };
        compatible = "zmk,combos";
        combo_ble {
            timeout-ms = <50>;
            key-positions = <4 24>;
            bindings = <&to 5>;
            };
        compatible = "zmk,combos";
        combo_gaem {
            timeout-ms = <100>;
            key-positions = <2 10 14 26>;
            bindings = <&to 6>;
            };
        compatible = "zmk,combos";
        combo_out {
            timeout-ms = <50>;
            key-positions = <20 29>;
            bindings = <&to 0>;
            };
        };
behaviors {    
        hr: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            require-prior-idle-ms = <200>;
            bindings = <&kp>, <&kp>;
        };  
        as: auto_shift {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping_term_ms = <135>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        }; 
         mousemokptp: mousemokptp {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mouse>, <&kp>;
        };  
         mokphp: mokphp {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred"; 
            tapping-term-ms = <200>;
            bindings = <&mo>, <&kp>;
        };  
         mokptp: mokptp {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            quick-tap-ms = <200>;
            tapping-term-ms = <200>;
            bindings = <&mo>, <&kp>;
        };  
         mokpb: mokpb {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            quick-tap-ms = <200>;
            tapping-term-ms = <200>;
            bindings = <&mo>, <&kp>;
        };  
         monavguitog: monavguitog {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <150>;
            bindings = <&monavgui>, <&tog>;
        };  
         moto: moto {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <150>;
            bindings = <&mo>, <&to>;
        };  
        skq: sticky_key_quick_release {
            compatible = "zmk,behavior-sticky-key";
            #binding-cells = <1>;
            bindings = <&kp>;
            release-after-ms = <1000>;
            quick-release;
            ignore-modifiers;
        };
        td_capslock: td_capslock {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&skq RSHIFT>, <&kp CAPS>;
        };
//----------------------ARROW MODS-------------------------
        };
        left_backspace: left_backspace {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LEFT>, <&kp BSPC>;
            mods = <(MOD_LCTL)>;
        };
        right_delete: right_delete {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp RIGHT>, <&kp DEL>;
            mods = <(MOD_LCTL)>;
        };
        left_alt_backspace: left_alt_backspace {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&left_backspace>, <&kp LA(BSPC)>;
            mods = <(MOD_RCTL)>;
        };
        right_alt_delete: right_alt_delete {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&right_delete>, <&kp LA(DEL)>;
            mods = <(MOD_RCTL)>;
        };
        arrow_mods: arrow_mods {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&right_alt_delete>, <&left_alt_backspace>;
        };
//--------------------MOUSE SCROLL ROTARY ENCODER FIX--------------------
        slow_y: slow_y {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&downslow>, <&upslow>;
        };
        slow_x: slow_x {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&rightslow>, <&leftslow>;
        };
        med_y: med_y {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&downmed>, <&upmed>;
        };
        med_x: med_x {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&rightmed>, <&leftmed>;
        };
        fast_y: fast_y {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&downfast>, <&upfast>;
        };
        fast_x: fast_x {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&rightfast>, <&leftfast>;
        };
        
macros {
        upslow: upslow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap_time 3>
                , <&msc MOVE_Y(-40)>;
         };
        downslow: downslow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap_time 3>
                , <&msc MOVE_Y(40)>;
         };
        leftslow: leftslow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap_time 3>
                , <&msc MOVE_X(40)>;
         };
        rightslow: rightslow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap_time 3>
                , <&msc MOVE_X(-40)>;
         };
        upmed: upmed {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap_time 3>
                , <&msc MOVE_Y(-200)>;
         };
        downmed: downmed {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap_time 3>
                , <&msc MOVE_Y(200)>;
         };
        leftmed: leftmed {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap_time 3>
                , <&msc MOVE_X(200)>;
         };
        rightmed: rightmed {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap_time 3>
                , <&msc MOVE_X(-200)>;
         };
        upfast: upfast {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap_time 3>
                , <&msc MOVE_Y(-1000)>;
         };
        downfast: downfast {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap_time 3>
                , <&msc MOVE_Y(1000)>;
         };
        leftfast: leftfast {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap_time 3>
                , <&msc MOVE_X(1000)>;
         };
        rightfast: rightfast {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap_time 3>
                , <&msc MOVE_X(-1000)>;
         };
//-----------------------------------------------------------
        monavgui: monavgui {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &mo 7 &kp LGUI>
                , <&macro_pause_for_release>
                , <&macro_release &kp LGUI &mo 7>;
         };
        up: up {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_release &kp LGUI>
                , <&macro_press &kp UP>
                , <&macro_pause_for_release>
                , <&macro_release &kp UP>
                , <&macro_press &kp LGUI>
                , <&macro_pause_for_release>
                , <&macro_release &kp LGUI>;
         };
        down: down {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_release &kp LGUI>
                , <&macro_press &kp DOWN>
                , <&macro_pause_for_release>
                , <&macro_release &kp DOWN>
                , <&macro_press &kp LGUI>
                , <&macro_pause_for_release>
                , <&macro_release &kp LGUI>;
         };
        left: left {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_release &kp LGUI>
                , <&macro_press &kp LEFT>
                , <&macro_pause_for_release>
                , <&macro_release &kp LEFT>
                , <&macro_press &kp LGUI>
                , <&macro_pause_for_release>
                , <&macro_release &kp LGUI>;
         };
        right: right {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_release &kp LGUI>
                , <&macro_press &kp RIGHT>
                , <&macro_pause_for_release>
                , <&macro_release &kp RIGHT>
                , <&macro_press &kp LGUI>
                , <&macro_pause_for_release>
                , <&macro_release &kp LGUI>;
         };
        mouse: mouse {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &to 3>
                , <&macro_pause_for_release>
                , <&macro_press &to 0>;
         };
    };
    keymap {
        compatible = "zmk,keymap";
        0 {
            display-name = "ALPHAS"; // 8 character max
bindings = <
&kp Q &kp W &kp E &kp R &kp T                                           &kp Y &kp U &kp I &kp O &kp P
&hr LS(LG(LA(LCTRL))) A &hr LALT S &hr LGUI D &hr LCTRL F &kp G         &kp H &hr RCTRL J &hr RGUI K &hr RALT L &hr LS(LG(LA(LCTRL))) APOS
&kp Z &kp X &kp C &kp V &kp B                                           &kp N &kp M &kp COMMA &kp DOT &kp SLASH
&moto 2 2 &mousemokptp 0 TAB &mokpb 1 SPACE                             &mokpb 1 BSPC &td_capslock &kp RETURN
              >;
            sensor-bindings = <&arrow_mods &inc_dec_kp DOWN UP>; //clockwise counterclockwise
        };
        1 {
            display-name = "NUMERAL";
bindings = <
&kp EXCLAMATION &kp AT &kp HASH &kp DOLLAR &kp PERCENT                                &kp STAR &kp N7 &kp N8 &kp N9 &kp MINUS
&hr LS(LG(LA(LCTRL))) CARET &hr LALT AMPS &hr LGUI LPAR &hr LCTRL RPAR &kp TILDE      &kp EQUAL &hr RCTRL N4 &hr RGUI N5 &hr RALT N6 &hr LS(LG(LA(LCTRL))) PLUS 
&kp COLON &kp BSLH &kp LBKT &kp RBKT &kp GRAVE                                         &kp UNDER &kp N1 &kp N2 &kp N3 &kp SEMI
&kp LBRC &kp RBRC &kp PIPE                                                                &kp N0 &kp BSPC &kp RETURN
              >;
            sensor-bindings = <&inc_dec_kp DEL BSPC &inc_dec_kp DOWN UP>; //clockwise counterclockwise
        };
        2 {
            display-name = "ARROWS";
bindings = <
&none &none &none &none &none                                               &none &none &none &none &none 
&kp LS(LG(LA(LCTRL))) &kp LALT &kp LGUI &kp LCTRL &none                   &none &kp LEFT &kp UP &kp RIGHT &kp DOWN
&none &none &none &none &none                                                 &none &none &none &none &none 
&none &none &none                                                                &none &none &none 
              >;
            sensor-bindings = <&inc_dec_kp DEL BSPC &inc_dec_kp DOWN UP>; //clockwise counterclockwise
        };
        3 {
            display-name = "MOUSEII";
bindings = <
&kp LG(N1) &kp LG(N2) &kp LG(N3) &kp LG(N4) &kp LG(N5)                                &none &kp LEFT &kp UP &kp RIGHT &kp DOWN
&hr LS(LG(LA(LCTRL))) LG(N6) &hr LGUI LG(N7) &hr LALT LG(N8) &hr LCTRL LG(N9) &none   &msc MOVE_Y(-20) &mmv MOVE_X(-1500) &mmv MOVE_Y(-1500) &mmv MOVE_X(1500) &mmv MOVE_Y(1500) 
&kp RG(Z) &kp RG(X) &kp RG(C) &kp RG(V) &kp RG(RS(Z))                                 &msc MOVE_Y(20) &mkp MB4 &mkp MB3 &mkp MB5 &kp DEL 
            &kp PG_UP &none &kp SPACE                                                 &mkp MB1 &mkp MB2 &kp PG_DN
              >;
            sensor-bindings = <&med_x &med_y>; //clockwise counterclockwise
        };
        4 {
            display-name = "MOUSEI";
bindings = <
&kp GRAVE &kp Q &kp W &kp E &kp R           &kp RG(RS(Z)) &kp RG(X) &kp RG(C) &kp RG(V) &kp RG(Z) 
&kp LSHIFT &kp A &kp S &kp D &kp F          &msc MOVE_Y(-10) &mmv MOVE_X(-500) &mmv MOVE_Y(-500) &mmv MOVE_X(500) &mmv MOVE_Y(500) 
&kp TAB &kp Z &kp X &kp C &kp V             &msc MOVE_Y(10) &mkp MB4 &mkp MB3 &mkp MB5 &kp DEL   
            &kp PG_UP &kp SPACE &kp SPACE         &mkp MB1 &mkp MB2 &kp PG_DN
              >;
            sensor-bindings = <&slow_x &slow_y>; //clockwise counterclockwise
        };
        5 {
            display-name = "MOUSEIII";
bindings = <
&kp GRAVE &kp Q &kp W &kp E &kp R           &kp RG(RS(Z)) &kp RG(X) &kp RG(C) &kp RG(V) &kp RG(Z)
&kp LSHIFT &kp A &kp S &kp D &kp F          &msc MOVE_Y(-40) &mmv MOVE_X(-3000) &mmv MOVE_Y(-3000) &mmv MOVE_X(3000) &mmv MOVE_Y(3000) 
&kp TAB &kp Z &kp X &kp C &kp V             &msc MOVE_Y(40) &mkp MB4 &mkp MB3 &mkp MB5 &kp DEL
            &kp PG_UP &kp SPACE &kp SPACE        &mkp MB1 &mkp MB2 &kp PG_DN 
              >;
            sensor-bindings = <&fast_x &fast_y>; //clockwise counterclockwise
        };
        6 {
            display-name = "BLE";
bindings = <
&bt BT_CLR &none &none &none &none      &none &none &none &none &out OUT_TOG
&none &none &none &none &none           &none &none &none &none &none 
&none &none &none &none &none           &none &none &none &none &none 
            &none &none &bt BT_PRV      &bt BT_NXT &none &none
              >;
            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp C_BRI_UP C_BRI_DN>; //clockwise counterclockwise
        };
        7 {
            display-name = "GAEM"; // 8 character max
bindings = <
&kp Q &kp W &kp E &kp R &kp T               &kp Y &kp U &kp I &kp O &kp P
&kp A &kp S &kp D &kp F &kp G               &kp H &kp J &kp K &kp L &kp SEMI
&kp Z &kp X &kp C &kp V &kp B               &kp N &kp M &kp COMMA &kp DOT &kp SLASH
&kp GRAVE &kp SPACE &kp LSHIFT              &kp RET &kp BSPC &kp TAB
              >;
            sensor-bindings = <&inc_dec_kp RIGHT LEFT &inc_dec_kp DOWN UP>; //clockwise counterclockwise
        };
        8 {
            display-name = "MINECRFT";
bindings = <
&kp GRAVE &kp Q &kp W &kp E &kp R                               &kp RG(RS(Z)) &kp RG(X) &kp RG(C) &kp RG(V) &kp RG(Z)
&kp LSHIFT &kp A &kp S &kp D &kp F                          &msc MOVE_Y(-10) &mmv MOVE_X(-1500) &mmv MOVE_Y(-1500) &mmv MOVE_X(1500) &mmv MOVE_Y(1500)
&kp Z &kp X &kp C &kp V &kp B                               &msc MOVE_Y(10) &mkp MB4 &mkp MB3 &mkp MB5 &kp DEL 
            &kp PG_UP &none &kp SPACE                      &mkp MB1 &mkp MB2 &kp PG_DN
              >;
            sensor-bindings = <&med_x &med_y>; //clockwise counterclockwise
        };
        9 {
            display-name = "FUNCTION";
bindings = <
&kp F1 &kp F2 &kp F3 &kp F4 &kp F5           &kp F6 &kp F7 &kp F8 &kp F9 &kp F10
&kp F11 &hr LALT F12 &kp LGUI &kp LCTRL &none &none &kp RCTRL &kp RGUI &kp RALT &none  
&none &none &none &none &none                &none &none &none &none &none
      &none &none &tog 8                     &none &none &none
              >;
            sensor-bindings = <&arrow_mods &inc_dec_kp C_VOL_UP C_VOL_DN>; //clockwise counterclockwise
            };
        };
    };